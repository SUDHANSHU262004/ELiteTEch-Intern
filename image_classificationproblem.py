# -*- coding: utf-8 -*-
"""Image classificationproblem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-uKLT6GYZAsEH4STFSv_Nsivk4MCLz16
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import numpy as np

# Load and preprocess dataset (CIFAR-10 for example)
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize images
y_train, y_test = y_train.flatten(), y_test.flatten()

# Define CNN model
def create_cnn_model():
    model = keras.Sequential([
            layers.Conv2D(32, (3,3), activation='relu', input_shape=(32, 32, 3)),
            layers.MaxPooling2D((2,2)),
            layers.Conv2D(64, (3,3), activation='relu'),
            layers.MaxPooling2D((2,2)),
            layers.Conv2D(128, (3,3), activation='relu'),
            layers.Flatten(),
            layers.Dense(128, activation='relu'),
            layers.Dense(10, activation='softmax')
            ])
    return model # Corrected indentation: This line should be aligned with the 'model =' statement

# Compile and train the model
model = create_cnn_model()
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")

# Plot training history
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()